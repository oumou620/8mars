// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://xzeemyrfzkrmizdzlsyp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh6ZWVteXJmemtybWl6ZHpsc3lwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDAyMzk5MjUsImV4cCI6MjA1NTgxNTkyNX0.cGv0HR-IloPu4JdGsnVhZiS2tHYtDlTr0BlWw0cMN6g";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to fetch mentors from the database
export const fetchMentors = async () => {
  try {
    const { data, error } = await supabase
      .from('mentors')
      .select('*');
    
    if (error) {
      toast.error(`Error fetching mentors: ${error.message}`);
      throw new Error(error.message);
    }
    
    return data || [];
  } catch (err) {
    console.error('Error fetching mentors:', err);
    toast.error('Failed to load mentors. Please try again later.');
    return [];
  }
};

// Helper function to create a mentor profile linked to the current user
export const createMentorProfile = async (mentorData: {
  name: string;
  role: string;
  company: string;
  specialty: string;
  bio: string;
  availability: string;
  image?: string;
}) => {
  try {
    const { data: userData, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      toast.error(`Error getting user: ${userError.message}`);
      throw userError;
    }
    
    if (!userData.user) {
      toast.error('You must be logged in to create a mentor profile');
      throw new Error('Not authenticated');
    }
    
    // Set default values if not provided
    const defaultImage = 'https://i.pravatar.cc/150?img=' + Math.floor(Math.random() * 70);
    
    const { data, error } = await supabase
      .from('mentors')
      .insert({
        id: userData.user.id, // Link the mentor profile to the user ID
        name: mentorData.name,
        role: mentorData.role,
        company: mentorData.company,
        specialty: mentorData.specialty,
        bio: mentorData.bio,
        availability: mentorData.availability,
        image: mentorData.image || defaultImage,
        rating: 5.0 // Default rating for new mentors
      })
      .select()
      .single();
    
    if (error) {
      toast.error(`Error creating mentor profile: ${error.message}`);
      throw error;
    }
    
    toast.success('Mentor profile created successfully');
    return data;
  } catch (err) {
    console.error('Error creating mentor profile:', err);
    toast.error('Failed to create mentor profile. Please try again later.');
    throw err;
  }
};

// Check if the current user has a mentor profile
export const checkMentorProfile = async () => {
  try {
    const { data: userData, error: userError } = await supabase.auth.getUser();
    
    if (userError) {
      throw userError;
    }
    
    if (!userData.user) {
      return null;
    }
    
    const { data, error } = await supabase
      .from('mentors')
      .select('*')
      .eq('id', userData.user.id)
      .maybeSingle();
    
    if (error) {
      throw error;
    }
    
    return data;
  } catch (err) {
    console.error('Error checking mentor profile:', err);
    return null;
  }
};

// Helper function to fetch mentoring requests for a mentor
export const fetchMentoringRequests = async (mentorId: string) => {
  try {
    // We cannot use typed join as initially planned
    // since the types are not up to date. We'll do two separate requests.
    const { data: requestsData, error: requestsError } = await supabase
      .from('mentoring_requests')
      .select('*')
      .eq('mentor_id', mentorId);
    
    if (requestsError) {
      toast.error(`Error fetching mentoring requests: ${requestsError.message}`);
      throw new Error(requestsError.message);
    }

    // If we have requests, let's get the learner information
    if (requestsData && requestsData.length > 0) {
      const learnerIds = requestsData.map(request => request.learner_id);
      
      try {
        // Attempt to get user profiles - this might not work with RLS
        // or insufficient permissions
        // Note: This part would need admin access which might not be available
        // For now, we're commenting this out and will return the requests without
        // enriching them with learner data
        /*
        const { data: learnersData, error: learnersError } = await supabase.auth.admin.listUsers();
        
        if (learnersError) {
          console.error('Error fetching learners:', learnersError);
        }
        
        // Combine request data with learner information
        if (learnersData) {
          const enrichedRequests = requestsData.map(request => {
            const learner = learnersData.users.find(user => user.id === request.learner_id);
            return {
              ...request,
              learner: learner ? {
                id: learner.id,
                email: learner.email,
                name: learner.user_metadata?.name || learner.email
              } : null
            };
          });
          
          return enrichedRequests;
        }
        */
      } catch (error) {
        console.error('Error enriching requests with learner data:', error);
      }
    }
    
    return requestsData || [];
  } catch (err) {
    console.error('Error fetching mentoring requests:', err);
    toast.error('Failed to load mentoring requests. Please try again later.');
    return [];
  }
};

// Fallback simple version that doesn't join learner data
export const fetchMentoringRequestsSimple = async (mentorId: string) => {
  try {
    const { data, error } = await supabase
      .from('mentoring_requests')
      .select('*')
      .eq('mentor_id', mentorId);
    
    if (error) {
      toast.error(`Error fetching mentoring requests: ${error.message}`);
      throw new Error(error.message);
    }
    
    return data || [];
  } catch (err) {
    console.error('Error fetching mentoring requests:', err);
    toast.error('Failed to load mentoring requests. Please try again later.');
    return [];
  }
};

// Helper function to update the status of a mentoring request
export const updateMentoringRequestStatus = async (requestId: string, status: 'pending' | 'accepted' | 'rejected') => {
  try {
    const { error } = await supabase
      .from('mentoring_requests')
      .update({ status, updated_at: new Date().toISOString() })
      .eq('id', requestId);
    
    if (error) {
      toast.error(`Error updating mentoring request: ${error.message}`);
      throw new Error(error.message);
    }
    
    toast.success(`Mentoring request ${status === 'accepted' ? 'accepted' : 'rejected'} successfully`);
    return true;
  } catch (err) {
    console.error('Error updating mentoring request:', err);
    toast.error('Failed to update mentoring request. Please try again later.');
    return false;
  }
};

// Helper function to fetch students (accepted mentoring requests) for a mentor
export const fetchStudentsForMentor = async (mentorId: string) => {
  try {
    // Fetch the mentoring requests with status 'accepted'
    const { data: mentorshipRequests, error: requestsError } = await supabase
      .from('mentoring_requests')
      .select('*')
      .eq('mentor_id', mentorId)
      .eq('status', 'accepted');
    
    if (requestsError) {
      toast.error(`Error fetching students: ${requestsError.message}`);
      throw new Error(requestsError.message);
    }
    
    // We need to fetch user details for each learner, but we can't directly access auth.users
    // This is a simplified version - in a real app, you would have a profiles table
    // that contains user details and you would join with it
    
    // For now, we'll return the basic information we have
    const students = mentorshipRequests.map(request => ({
      id: request.learner_id,
      name: `Student ${request.learner_id.substring(0, 4)}`, // Placeholder name
      email: `student-${request.learner_id.substring(0, 4)}@example.com`, // Placeholder email
      request_id: request.id,
      request_date: request.created_at || new Date().toISOString(),
      status: request.status
    }));
    
    return students;
  } catch (err) {
    console.error('Error fetching students for mentor:', err);
    toast.error('Failed to load students. Please try again later.');
    return [];
  }
};
